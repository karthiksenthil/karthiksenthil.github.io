<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Karthik Senthil</title>
 <link href="https://karthiksenthil.github.io/atom.xml" rel="self"/>
 <link href="https://karthiksenthil.github.io/"/>
 <updated>2016-05-27T00:48:17+05:30</updated>
 <id>https://karthiksenthil.github.io</id>
 <author>
   <name>Karthik Senthil</name>
   <email>karthik.senthil94@gmail.com</email>
 </author>

 
 <entry>
   <title>[GSoC 2016] Backtrack bug solved</title>
   <link href="https://karthiksenthil.github.io/2016/05/26/gsoc16/"/>
   <updated>2016-05-26T00:00:00+05:30</updated>
   <id>https://karthiksenthil.github.io/2016/05/26/gsoc16</id>
   <content type="html">&lt;p&gt;This post is to update about the current status of work in ruby_curry as part of GSoC 2016.&lt;/p&gt;

&lt;p&gt;As mentioned in my previous post, I spent the last few days looking into options for the “translator” system and fixing the “backtracking” feature.&lt;/p&gt;

&lt;p&gt;With respect to the solving the “backtrack” bug, I had to initially provide support for &lt;code&gt;CHOICE&lt;/code&gt; in the frontend of ruby_curry. There were some issues regarding deep cloning(using &lt;code&gt;Marshal.dump&lt;/code&gt;) while implementing this, which in fact taught me more about simpleton objects in Ruby. After adding support, I decided to test it with a slightly complex &lt;a href=&quot;https://github.com/karthiksenthil/ruby_curry/blob/master/user/permute.json&quot;&gt; permute &lt;/a&gt; example. The parsing passed but the output produced by the object code was incorrect due to the backtrack bug.&lt;/p&gt;

&lt;p&gt;To solve the bug, I wrote down a simpler &lt;a href=&quot;https://github.com/karthiksenthil/ruby_curry/blob/master/user/simple_choice.json&quot;&gt; simple_choice &lt;/a&gt; example. And by using the stack trace and logging features I identified the problem to lie in assigning an unnecessary global variable :P&lt;/p&gt;

&lt;p&gt;That solved the problem and I added a corresponding &lt;a href=&quot;https://github.com/karthiksenthil/ruby_curry/blob/master/test/test_simple_choice.rb&quot;&gt; test case &lt;/a&gt; for future reference.&lt;/p&gt;

&lt;p&gt;Regarding implementation of the “translator” system, I am speculating into using an existing library. More details about this will be updated after discussions with my mentor.&lt;/p&gt;

&lt;p&gt;Up next should be new features for ruby_curry like support for &lt;code&gt;where&lt;/code&gt;, &lt;code&gt;loop&lt;/code&gt; and &lt;code&gt;case&lt;/code&gt; clauses, and probably an efficient type system for the compiler.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>[GSoC 2016] Coding phase - First post</title>
   <link href="https://karthiksenthil.github.io/2016/05/23/gsoc16/"/>
   <updated>2016-05-23T00:00:00+05:30</updated>
   <id>https://karthiksenthil.github.io/2016/05/23/gsoc16</id>
   <content type="html">&lt;p&gt;Hello all!&lt;/p&gt;

&lt;p&gt;As part of the initial stage of the Coding Phase, I had a discussion with my mentor regarding the immediate set of tasks/features to be implemented for the tool (picking from the points highlighted in the proposal). The following are tasks at hand:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; &lt;b&gt;translator&lt;/b&gt; - A system to translate Curry into a format that is suitable for ruby_curry compiler. At the moment we aim to directly translating Curry to JSON if possible with definitional tree information. &lt;/li&gt;
&lt;li&gt; &lt;b&gt;backtracking&lt;/b&gt; - The compiler has a stack based backtracking feature to handle CHOICE in Curry. However this module seems buggy and fails for certain examples.&lt;/li&gt;
&lt;li&gt; Quality and type system &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In addition, I have also added a new test framework to ruby_curry which will enable to integrate all unit tests. This will be beneficial in continously testing the new changes that are being made to the compiler or other relevant modules of the tool.&lt;/p&gt;

&lt;p&gt;To integrate all tests, I added a &lt;a href=&quot;https://github.com/ruby/rake&quot;&gt;Rake&lt;/a&gt; task for tests. All the current unit tests can be run by the &lt;code&gt;rake test&lt;/code&gt; command in the base directory of ruby_curry. The commit for this change can be found &lt;a href=&quot;https://github.com/karthiksenthil/ruby_curry/commit/d59d1108c19003efeef8b111794546f40412cab5&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>[GSoC 2016] Completion of status report</title>
   <link href="https://karthiksenthil.github.io/2016/05/18/gsoc16/"/>
   <updated>2016-05-18T00:00:00+05:30</updated>
   <id>https://karthiksenthil.github.io/2016/05/18/gsoc16</id>
   <content type="html">&lt;p&gt;I have completed the brief status &lt;a href=&quot;https://docs.google.com/document/d/1O6udc8el6X_P1nZt1bk_gMCTw0W4PY-swhsPnx1Fs-o/edit?usp=sharing&quot;&gt;report&lt;/a&gt; of the current ruby_curry codebase. The report is organised into 3 main sections -&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; Installation/Usage instructions &lt;/li&gt;
&lt;li&gt; Code Workflow &lt;/li&gt;
&lt;li&gt; Directory-wise file descriptions &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The primary purpose of the report is to document the current work so as to comprehensively evaluate the tool from scratch. The evaluation will aid in planning the first set of steps to be undertaken in the upcoming “Coding Phase” of GSoC. The document will also aid the users interested in using the current version of ruby_curry.&lt;/p&gt;

&lt;p&gt;Please leave your comments/suggestions in the report :)&lt;/p&gt;

&lt;p&gt;Looking forward to start the Coding Phase !&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>[GSoC 2016] Codebase status report and installing KiCS2</title>
   <link href="https://karthiksenthil.github.io/2016/05/13/gsoc16/"/>
   <updated>2016-05-13T00:00:00+05:30</updated>
   <id>https://karthiksenthil.github.io/2016/05/13/gsoc16</id>
   <content type="html">&lt;p&gt;Hello all!&lt;/p&gt;

&lt;p&gt;This post is to update about my progress in generating a status report for the ruby_curry codebase. I have logically divided the code repo into components and have started documenting the working of each component. The ongoing copy of the report can be viewed &lt;a href=&quot;https://docs.google.com/document/d/1O6udc8el6X_P1nZt1bk_gMCTw0W4PY-swhsPnx1Fs-o/edit?usp=sharing&quot;&gt;here&lt;/a&gt;. I will continue updating this document over the next week.&lt;/p&gt;

&lt;p&gt;Regarding the installation of &lt;a href=&quot;https://www-ps.informatik.uni-kiel.de/kics2/index.html&quot;&gt;KiCS2&lt;/a&gt;, I carried out the following steps :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; installing GHC(The Glasgow Haskell Compiler) and Cabal &lt;/li&gt;
&lt;li&gt; downloading tar of latest release of KiCS2 and building natively &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Intitally the Haskell compiler choked at linking as it by default used the &lt;b&gt;ld.gold&lt;/b&gt; linker. This is a known &lt;a href=&quot;http://stackoverflow.com/questions/13046319/haskell-ghc-compiling-linking-error-not-creating-executable-linux&quot;&gt;issue&lt;/a&gt; which I solved by purging binutils-gold as suggested &lt;a href=&quot;http://stackoverflow.com/a/13046709&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After this step, the KiCS2 build again failed with Cabal failing to install some packages due to unmet dependencies. I am currently working on getting around this issue. The missing dependencies include &lt;i&gt;comonad 5&lt;/i&gt;, &lt;i&gt;semigroupoids-5.0.1&lt;/i&gt; and &lt;i&gt;mtl-2.2.1&lt;/i&gt;. I have tried natively installing these dependencies from source(Github), but the build still seems to fail for same reason. I will try other possible steps to solve this problem and go ahead with exploring the features of KiCS2.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>[GSoC 2016] Installing PAKCS</title>
   <link href="https://karthiksenthil.github.io/2016/05/09/gsoc16/"/>
   <updated>2016-05-09T00:00:00+05:30</updated>
   <id>https://karthiksenthil.github.io/2016/05/09/gsoc16</id>
   <content type="html">&lt;p&gt;I spent the last few days surfing through the current codebase in ruby_curry in order to identify the code workflow for a single run of the tool.&lt;/p&gt;

&lt;p&gt;I have also started documenting a directory wise description of files for the status report which should be available soon.&lt;/p&gt;

&lt;p&gt;With regards to installing PAKCS on my local machine, I followed the instructions provided &lt;a href=&quot;https://www.informatik.uni-kiel.de/~pakcs/download.html&quot;&gt;here&lt;/a&gt;. I already had an updated version of &lt;a href=&quot;http://www.swi-prolog.org/&quot;&gt;SWI-Prolog&lt;/a&gt; and hence went ahead to just download the Linux(64 bit) release of &lt;a href=&quot;https://www.informatik.uni-kiel.de/~pakcs/download/pakcs-1.14.1-amd64-Linux.tar.gz&quot;&gt;PAKCS v1.14.1&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;The build took quite some time, but towards the end it was a smooth install. I could verify the working with the &lt;a href=&quot;http://www-ps.informatik.uni-kiel.de/smap/smap.cgi?download/1/1&quot;&gt;Naive Reverse&lt;/a&gt; example.&lt;/p&gt;

&lt;p&gt;An interesting feature in PAKCS is the curry2xml tool (using :xml in the REPL). This caught my attention as ruby_curry also aims to convert FlatCurry into JSON(in the frontend) for further processing into Ruby object code. So I’m looking into the working and features of this tool in PAKCS before implementing a similar idea for JSON in ruby_curry.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>[GSoC 2016] Community Bonding - First Post</title>
   <link href="https://karthiksenthil.github.io/2016/05/07/gsoc16/"/>
   <updated>2016-05-07T00:00:00+05:30</updated>
   <id>https://karthiksenthil.github.io/2016/05/07/gsoc16</id>
   <content type="html">&lt;p&gt;Hello all!&lt;/p&gt;

&lt;p&gt;This year as part of Google Summer of Code 2016 I will continue working on &lt;a href=&quot;https://github.com/karthiksenthil/ruby_curry&quot;&gt;ruby_curry&lt;/a&gt;, extending it to a full fledged compiler implementation for FlatCurry, a flavour of the functional logic programming language &lt;a href=&quot;https://en.wikipedia.org/wiki/Curry_(programming_language)&quot;&gt;Curry&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;More details about the project can be found &lt;a href=&quot;https://summerofcode.withgoogle.com/projects/#4517222395412480&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After discussions with my mentor, Prof. Antoy, I have decided to spend the initial part of the Community Bonding period for the following -&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; Status Report - detailed draft of current status of ruby_curry w.r.t. features and bugs &lt;/li&gt;
&lt;li&gt; Setting up &lt;a href=&quot;https://www.informatik.uni-kiel.de/~pakcs/&quot;&gt;PAKCS&lt;/a&gt; and &lt;a href=&quot;https://www-ps.informatik.uni-kiel.de/kics2/&quot;&gt;KiCS2&lt;/a&gt; on local machine &lt;/li&gt;
&lt;li&gt; Survey on the above compilers &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Looking forward to learn more :)&lt;/p&gt;

&lt;p&gt;P.S. : And yes, this year I will update about my progress in this project through regular blog posts on my personal website itself.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Multrix - A tool for dynamic dependence analysis of a program</title>
   <link href="https://karthiksenthil.github.io/2015/08/18/multrix/"/>
   <updated>2015-08-18T00:00:00+05:30</updated>
   <id>https://karthiksenthil.github.io/2015/08/18/multrix</id>
   <content type="html">&lt;p&gt;&lt;em&gt;A project undertaken in the &lt;a href=&quot;http://hpc.nitk.ac.in/&quot;&gt;HPC Research Group&lt;/a&gt; at National Institute of Technology Karnataka, India&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Multrix is an automatic, dynamic and language-independent tool to construct the Node Dependency Matrix(NDM) of an input program. It uses dynamic binary instrumentation techniques to identify dependencies at instruction level in the input program, and reprsent the same using the NDM.&lt;/p&gt;

&lt;p&gt;The Intel PIN DBI framework was used for instrumentation. Pin provides great flexibility in analysing executables with features to insert stubs or breakpoints in the running program. A custom program written using the Pin API to analyse running programs is a called PinTool.&lt;/p&gt;

&lt;p&gt;Usage and execution cycle in Pin :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Design Pintool to perform required analysis&lt;/li&gt;
  &lt;li&gt;Compile the Pintool into an &lt;code&gt;so&lt;/code&gt; file(shared object)&lt;/li&gt;
  &lt;li&gt;Attach the file to the program and execute it&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Work in progress&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>What is HPC?</title>
   <link href="https://karthiksenthil.github.io/2015/06/24/whats-hpc/"/>
   <updated>2015-06-24T00:00:00+05:30</updated>
   <id>https://karthiksenthil.github.io/2015/06/24/whats-hpc</id>
   <content type="html">&lt;p&gt;High Performance Computing(HPC) is becoming a trending term in Computer Science. Here is my view or definition of HPC in layman words.&lt;/p&gt;

&lt;p&gt;As humans we are bound by the performance metric in any activity that we pursue, constantly aiming to improve this metric. So it is unsurprising that computing devices these days are also striving to give their best performance.&lt;/p&gt;

&lt;p&gt;In my view, HPC can be defined as any activity that reduces computation time of a process on a computing device and accordingly shows signs of improvement(large or small-scale) in performance. Even the smallest step of reducing unecessary iterations in a for-loop can be a simple step towards high performance computing. A tool which emphasises this : &lt;a href=&quot;http://karthiksenthil.github.io/2015/08/18/multrix/&quot;&gt;Multrix&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So HPC doesn’t just refer to large scale parallel architectures or huge clusters of CPUs and GPUs with millions of cores. The simple small-scale optimizations that when implemented conserve our computation resources are the activities that define and drive HPC.&lt;/p&gt;
</content>
 </entry>
 

</feed>
