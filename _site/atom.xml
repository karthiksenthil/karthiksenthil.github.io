<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Karthik Senthil</title>
 <link href="https://karthiksenthil.github.io/atom.xml" rel="self"/>
 <link href="https://karthiksenthil.github.io/"/>
 <updated>2016-06-30T15:43:10+05:30</updated>
 <id>https://karthiksenthil.github.io</id>
 <author>
   <name>Karthik Senthil</name>
   <email>karthik.senthil94@gmail.com</email>
 </author>

 
 <entry>
   <title>[GSoC 2016] Refactoring of expressions</title>
   <link href="https://karthiksenthil.github.io/2016/06/30/gsoc16/"/>
   <updated>2016-06-30T00:00:00+05:30</updated>
   <id>https://karthiksenthil.github.io/2016/06/30/gsoc16</id>
   <content type="html">&lt;p&gt;Hello all!&lt;/p&gt;

&lt;p&gt;I spent the last few days working on refactoring the old expressions.rb (in ruby runtime environment) into a revamped &lt;code&gt;CT_Expressions&lt;/code&gt; module. This solves the issue of namespaces thus giving flexibility to names being used in the Curry programs. The entire module is divided into 4 files - &lt;a href=&quot;https://github.com/karthiksenthil/ruby_curry/blob/master/src/compiler/CT_Expressions.rb&quot;&gt;expression class definitions&lt;/a&gt;, &lt;a href=&quot;https://github.com/karthiksenthil/ruby_curry/blob/master/src/compiler/CT_Expressions_print.rb&quot;&gt;expression printing&lt;/a&gt;, &lt;a href=&quot;https://github.com/karthiksenthil/ruby_curry/blob/master/src/compiler/CT_Expressions_equality.rb&quot;&gt;expression equality&lt;/a&gt; and &lt;a href=&quot;https://github.com/karthiksenthil/ruby_curry/blob/master/src/compiler/CT_Expressions_utils.rb&quot;&gt;expression utilities&lt;/a&gt;. We tested this new module on all the existing test cases.&lt;/p&gt;

&lt;p&gt;After this refactoring I moved ahead to implement the equality operation &lt;a href=&quot;https://github.com/karthiksenthil/ruby_curry/blob/master/docs/equality-algorithm.txt&quot;&gt;algorithm&lt;/a&gt; in &lt;code&gt;CT_External&lt;/code&gt; which has also been completed now. &lt;/p&gt;

&lt;p&gt;I am now working on the Prelude compare operation based on this &lt;a href=&quot;https://github.com/karthiksenthil/ruby_curry/blob/master/docs/compare-algorithm.txt&quot;&gt;algorithm&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>[GSoC 2016] Progress on External runtime functions</title>
   <link href="https://karthiksenthil.github.io/2016/06/25/gsoc16/"/>
   <updated>2016-06-25T00:00:00+05:30</updated>
   <id>https://karthiksenthil.github.io/2016/06/25/gsoc16</id>
   <content type="html">&lt;p&gt;After the codebase merge a lot of new tasks and issues turned up. One of the important tasks is adding runtime support for externally defined functions in &lt;a href=&quot;https://github.com/karthiksenthil/ruby_curry/blob/master/lib/Prelude.rb&quot;&gt;Prelude&lt;/a&gt;. I have made a complete &lt;a href=&quot;https://github.com/karthiksenthil/ruby_curry/blob/master/docs/DOUBTS&quot;&gt;list&lt;/a&gt; of unimplemented External functions and their priorities. Current status of this module can be found &lt;a href=&quot;https://github.com/karthiksenthil/ruby_curry/blob/master/lib/CT_External.rb&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before this task I also worked on making a more robust &lt;a href=&quot;https://github.com/karthiksenthil/ruby_curry/blob/master/test/test_positives.rb&quot;&gt;test suite&lt;/a&gt; in ruby. All tests can be run using the &lt;code&gt;rake test&lt;/code&gt; command and in order to force recompile all intermediate files from scratch for testing, the command &lt;code&gt;rake ftest&lt;/code&gt; can be used.&lt;/p&gt;

&lt;p&gt;I am currently working of refactoring &lt;a href=&quot;https://github.com/karthiksenthil/ruby_curry/blob/master/src/compiler/expressions.rb&quot;&gt;expressions.rb&lt;/a&gt; to facilitate the definition of some External functions.&lt;/p&gt;

&lt;p&gt;The complete list of upcoming tasks can be found &lt;a href=&quot;https://github.com/karthiksenthil/ruby_curry/blob/master/docs/TODO&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>[GSoC 2016] Merged Github repository with try server codebase</title>
   <link href="https://karthiksenthil.github.io/2016/06/20/gsoc16/"/>
   <updated>2016-06-20T00:00:00+05:30</updated>
   <id>https://karthiksenthil.github.io/2016/06/20/gsoc16</id>
   <content type="html">&lt;p&gt;Over the last few weeks I have been adding all the development code to the try server codebase for immediate testing and rapid modifications. The tool has now reached a stable state which can be used to compile and execute simple Curry programs, and hence I have merged this development code with the stable Github repository for public viewing and usage.&lt;/p&gt;

&lt;p&gt;The current code can be found on Github &lt;a href=&quot;https://github.com/karthiksenthil/ruby_curry&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The compilation pipeline details and usage of the tool is explained in the updated &lt;a href=&quot;https://github.com/karthiksenthil/ruby_curry/blob/master/README.md&quot;&gt;README&lt;/a&gt;. There is also a &lt;a href=&quot;https://github.com/karthiksenthil/ruby_curry/tree/master/test&quot;&gt;test&lt;/a&gt; suite to verify the working of the current status of the full system. The tests can be run by &lt;code&gt;rake test&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;ruby_curry can be setup and run by installing either PAKCS or KiCS on local machine. We plan on removing this dependency(by compiling into an executable) in the final release of the tool by the end of this GSoC.&lt;/p&gt;

&lt;p&gt;Looking forward to add complete support and more features into the system in order to flawlessly compile a real world Curry application.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>[GSoC 2016] Cleanup and progress for mid evaluations</title>
   <link href="https://karthiksenthil.github.io/2016/06/15/gsoc16/"/>
   <updated>2016-06-15T00:00:00+05:30</updated>
   <id>https://karthiksenthil.github.io/2016/06/15/gsoc16</id>
   <content type="html">&lt;p&gt;This week I’ve been working on tasks to prepare ruby_curry for a version release on Github and the GSoC mid evaluations.&lt;/p&gt;

&lt;p&gt;I’ve added the module/namespace feature in the ruby object code and also provided support for integers in the runtime environment. I also did some code cleanup and removed obsolete code in the old codebase that is used on the try server.&lt;/p&gt;

&lt;p&gt;This weekend I plan on merging the 2 repositories i.e try server codebase and Github repository. This would enable people to use the first minimal version of ruby_curry for their usage. I also plan on revamping the current test suite for the project. The updated list of TODO tasks can be found &lt;a href=&quot;https://github.com/karthiksenthil/ruby_curry/blob/master/TODO&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>[GSoC 2016] Progress in RCurry</title>
   <link href="https://karthiksenthil.github.io/2016/06/12/gsoc16/"/>
   <updated>2016-06-12T00:00:00+05:30</updated>
   <id>https://karthiksenthil.github.io/2016/06/12/gsoc16</id>
   <content type="html">&lt;p&gt;Hello all!&lt;/p&gt;

&lt;p&gt;Over the last week, I progressed in defining RCurry and correspondingly updated ICurryToAbstractRuby(the module to convert ICurry to RCurry). The current implementation can be used to compile and execute simple examples like &lt;code&gt;mynot&lt;/code&gt; and &lt;code&gt;myappend&lt;/code&gt;. There were many issues regarding lack of information available in ICurry which I tackled after discussions with my mentor. The source for &lt;a href=&quot;https://github.com/karthiksenthil/ruby_curry/blob/master/lib/RCurry.curry&quot;&gt;RCurry&lt;/a&gt; and &lt;a href=&quot;https://github.com/karthiksenthil/ruby_curry/blob/master/lib/ICurryToAbstractRuby.curry&quot;&gt;ICurryToAbstractRuby&lt;/a&gt; are available on the Github repository. A sample ruby object code produced by this version of the system can be found &lt;a href=&quot;https://github.com/karthiksenthil/ruby_curry/blob/master/lib/mynot.rb&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This week I plan on completing the full support for converting ICurry to RCurry and also improve the ruby runtime environment with features like Modules and Builtin data types. I also plan on working on a new test suite for ruby_curry by verifying the compilation made using ICurry and RCurry.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>[GSoC 2016] Introducing RCurry - An abstraction layer</title>
   <link href="https://karthiksenthil.github.io/2016/06/05/gsoc16/"/>
   <updated>2016-06-05T00:00:00+05:30</updated>
   <id>https://karthiksenthil.github.io/2016/06/05/gsoc16</id>
   <content type="html">&lt;p&gt;Hello all!&lt;/p&gt;

&lt;p&gt;As discussed in the previous post, we made a drastic change in the architecture of ruby_curry by utilising &lt;a href=&quot;https://github.com/karthiksenthil/ruby_curry/blob/master/docs/ICurry.pdf&quot;&gt;ICurry&lt;/a&gt; to cover the compilation steps while providing a robust runtime environment in ruby.&lt;/p&gt;

&lt;p&gt;My mentor and I had discussions about how cumbersome the task of directly converting &lt;a href=&quot;https://github.com/karthiksenthil/ruby_curry/blob/master/lib/ICurryToRuby.curry&quot;&gt;ICurry to Ruby&lt;/a&gt; was. The feature set was limited and needed extra programming just to obtain some information for the Ruby object code. As a suggestion to solve this, we decided to introduce a layer of abstraction over ICurry - called RCurry. RCurry will be a code level abstraction of the information in ICurry i.e. in order to convert ICurry into executable code we add an abstract layer which can then be converted to object code in any language.&lt;/p&gt;

&lt;p&gt;This would make the generation of object highly language independent. All one has to do is create a runtime environment for execution and develop a pretty printer(or converter) for translating RCurry into language of their choice. This logical partition also makes maintenance and development easy.&lt;/p&gt;

&lt;p&gt;On these lines, I have been working on defining RCurry and a module to convert ICurry to RCurry called ICurryToAbstractRuby. These modules are currently a stub under development and being tested on the try server. I plan on making it available on the Github repo by the end of next week, along with a couple of tasks implemented from the TODO list … So stay tuned :)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>[GSoC 2016] Progress on translator system</title>
   <link href="https://karthiksenthil.github.io/2016/06/02/gsoc16/"/>
   <updated>2016-06-02T00:00:00+05:30</updated>
   <id>https://karthiksenthil.github.io/2016/06/02/gsoc16</id>
   <content type="html">&lt;p&gt;Over the last few days I have been working on the ICurry to ruby object code translator system. I developed the first version which successfully produced executable object code for the simple mynot.curry example -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
mynot.curry

data myBool = myTrue | myFalse

myNot myTrue = myFalse
myNot myFalse = myTrue

main = myNot (myNot myTrue)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The curry program for the translator can be found &lt;a href=&quot;https://github.com/karthiksenthil/ruby_curry/blob/master/lib/ICurryToRuby.curry&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Currently this program is not executable with the support available in the Github repository of ruby_curry. My mentor and myself have set up a temporary try server and repo to test development stubs since the ICurry library is itself big and difficult to set up.&lt;/p&gt;

&lt;p&gt;There is a slight re-architecture in the flow diagram of ruby_curry :-&lt;/p&gt;

&lt;p&gt;Curry source program —&amp;gt; ICurry library —&amp;gt; .icur representation —&amp;gt; Ruby executable object code&lt;/p&gt;

&lt;p&gt;i.e we have moved the compilation computations to ICurry and implemented the complete runtime environment in ruby. This is to ensure better scaling and ability to handle larger Curry programs, which could not be achieved in a ruby based compiler.&lt;/p&gt;

&lt;p&gt;There might be further changes to better this current architecture. I will post about the same when complete :)&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>[GSoC 2016] Translator system for ruby_curry</title>
   <link href="https://karthiksenthil.github.io/2016/05/29/gsoc16/"/>
   <updated>2016-05-29T00:00:00+05:30</updated>
   <id>https://karthiksenthil.github.io/2016/05/29/gsoc16</id>
   <content type="html">&lt;p&gt;I had a discussion with my mentor regarding a translator system which would handle the frontend parsing of Curry source program into an intermediate form suitable for the ruby_curry compiler. We concluded that it would be a better option to use an already implemented library for this task, called &lt;a href=&quot;https://github.com/karthiksenthil/ruby_curry/blob/master/docs/ICurry.txt&quot;&gt;ICurry&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This library translates Curry source program into an internal representation. The ICurry representation contains the operation rules in the format of nodes of a graph. From initial reviews it looks like there is more than sufficient information available in this graph for ruby_curry.&lt;/p&gt;

&lt;p&gt;The current idea is to use this graph data structure to construct the Rule objects. These objects can then be compiled into the ruby object code by building corresponding definitional trees. I will be spending the next few days working on this module for ruby_curry.&lt;/p&gt;

&lt;p&gt;Apart from this I added a &lt;a href=&quot;https://github.com/karthiksenthil/ruby_curry/blob/master/TODO&quot;&gt;TODO&lt;/a&gt; list to keep track of pending issues/features in the current state of the tool.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>[GSoC 2016] Backtrack bug solved</title>
   <link href="https://karthiksenthil.github.io/2016/05/26/gsoc16/"/>
   <updated>2016-05-26T00:00:00+05:30</updated>
   <id>https://karthiksenthil.github.io/2016/05/26/gsoc16</id>
   <content type="html">&lt;p&gt;This post is to update about the current status of work in ruby_curry as part of GSoC 2016.&lt;/p&gt;

&lt;p&gt;As mentioned in my previous post, I spent the last few days looking into options for the “translator” system and fixing the “backtracking” feature.&lt;/p&gt;

&lt;p&gt;With respect to the solving the “backtrack” bug, I had to initially provide support for &lt;code&gt;CHOICE&lt;/code&gt; in the frontend of ruby_curry. There were some issues regarding deep cloning(using &lt;code&gt;Marshal.dump&lt;/code&gt;) while implementing this, which in fact taught me more about simpleton objects in Ruby. After adding support, I decided to test it with a slightly complex &lt;a href=&quot;https://github.com/karthiksenthil/ruby_curry/blob/master/user/permute.json&quot;&gt; permute &lt;/a&gt; example. The parsing passed but the output produced by the object code was incorrect due to the backtrack bug.&lt;/p&gt;

&lt;p&gt;To solve the bug, I wrote down a simpler &lt;a href=&quot;https://github.com/karthiksenthil/ruby_curry/blob/master/user/simple_choice.json&quot;&gt; simple_choice &lt;/a&gt; example. And by using the stack trace and logging features I identified the problem to lie in assigning an unnecessary global variable :P&lt;/p&gt;

&lt;p&gt;That solved the problem and I added a corresponding &lt;a href=&quot;https://github.com/karthiksenthil/ruby_curry/blob/master/test/test_simple_choice.rb&quot;&gt; test case &lt;/a&gt; for future reference.&lt;/p&gt;

&lt;p&gt;Regarding implementation of the “translator” system, I am speculating into using an existing library. More details about this will be updated after discussions with my mentor.&lt;/p&gt;

&lt;p&gt;Up next should be new features for ruby_curry like support for &lt;code&gt;where&lt;/code&gt;, &lt;code&gt;loop&lt;/code&gt; and &lt;code&gt;case&lt;/code&gt; clauses, and probably an efficient type system for the compiler.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>[GSoC 2016] Coding phase - First post</title>
   <link href="https://karthiksenthil.github.io/2016/05/23/gsoc16/"/>
   <updated>2016-05-23T00:00:00+05:30</updated>
   <id>https://karthiksenthil.github.io/2016/05/23/gsoc16</id>
   <content type="html">&lt;p&gt;Hello all!&lt;/p&gt;

&lt;p&gt;As part of the initial stage of the Coding Phase, I had a discussion with my mentor regarding the immediate set of tasks/features to be implemented for the tool (picking from the points highlighted in the proposal). The following are tasks at hand:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; &lt;b&gt;translator&lt;/b&gt; - A system to translate Curry into a format that is suitable for ruby_curry compiler. At the moment we aim to directly translating Curry to JSON if possible with definitional tree information. &lt;/li&gt;
&lt;li&gt; &lt;b&gt;backtracking&lt;/b&gt; - The compiler has a stack based backtracking feature to handle CHOICE in Curry. However this module seems buggy and fails for certain examples.&lt;/li&gt;
&lt;li&gt; Quality and type system &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In addition, I have also added a new test framework to ruby_curry which will enable to integrate all unit tests. This will be beneficial in continously testing the new changes that are being made to the compiler or other relevant modules of the tool.&lt;/p&gt;

&lt;p&gt;To integrate all tests, I added a &lt;a href=&quot;https://github.com/ruby/rake&quot;&gt;Rake&lt;/a&gt; task for tests. All the current unit tests can be run by the &lt;code&gt;rake test&lt;/code&gt; command in the base directory of ruby_curry. The commit for this change can be found &lt;a href=&quot;https://github.com/karthiksenthil/ruby_curry/commit/d59d1108c19003efeef8b111794546f40412cab5&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>[GSoC 2016] Completion of status report</title>
   <link href="https://karthiksenthil.github.io/2016/05/18/gsoc16/"/>
   <updated>2016-05-18T00:00:00+05:30</updated>
   <id>https://karthiksenthil.github.io/2016/05/18/gsoc16</id>
   <content type="html">&lt;p&gt;I have completed the brief status &lt;a href=&quot;https://docs.google.com/document/d/1O6udc8el6X_P1nZt1bk_gMCTw0W4PY-swhsPnx1Fs-o/edit?usp=sharing&quot;&gt;report&lt;/a&gt; of the current ruby_curry codebase. The report is organised into 3 main sections -&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; Installation/Usage instructions &lt;/li&gt;
&lt;li&gt; Code Workflow &lt;/li&gt;
&lt;li&gt; Directory-wise file descriptions &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The primary purpose of the report is to document the current work so as to comprehensively evaluate the tool from scratch. The evaluation will aid in planning the first set of steps to be undertaken in the upcoming “Coding Phase” of GSoC. The document will also aid the users interested in using the current version of ruby_curry.&lt;/p&gt;

&lt;p&gt;Please leave your comments/suggestions in the report :)&lt;/p&gt;

&lt;p&gt;Looking forward to start the Coding Phase !&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>[GSoC 2016] Codebase status report and installing KiCS2</title>
   <link href="https://karthiksenthil.github.io/2016/05/13/gsoc16/"/>
   <updated>2016-05-13T00:00:00+05:30</updated>
   <id>https://karthiksenthil.github.io/2016/05/13/gsoc16</id>
   <content type="html">&lt;p&gt;Hello all!&lt;/p&gt;

&lt;p&gt;This post is to update about my progress in generating a status report for the ruby_curry codebase. I have logically divided the code repo into components and have started documenting the working of each component. The ongoing copy of the report can be viewed &lt;a href=&quot;https://docs.google.com/document/d/1O6udc8el6X_P1nZt1bk_gMCTw0W4PY-swhsPnx1Fs-o/edit?usp=sharing&quot;&gt;here&lt;/a&gt;. I will continue updating this document over the next week.&lt;/p&gt;

&lt;p&gt;Regarding the installation of &lt;a href=&quot;https://www-ps.informatik.uni-kiel.de/kics2/index.html&quot;&gt;KiCS2&lt;/a&gt;, I carried out the following steps :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; installing GHC(The Glasgow Haskell Compiler) and Cabal &lt;/li&gt;
&lt;li&gt; downloading tar of latest release of KiCS2 and building natively &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Intitally the Haskell compiler choked at linking as it by default used the &lt;b&gt;ld.gold&lt;/b&gt; linker. This is a known &lt;a href=&quot;http://stackoverflow.com/questions/13046319/haskell-ghc-compiling-linking-error-not-creating-executable-linux&quot;&gt;issue&lt;/a&gt; which I solved by purging binutils-gold as suggested &lt;a href=&quot;http://stackoverflow.com/a/13046709&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After this step, the KiCS2 build again failed with Cabal failing to install some packages due to unmet dependencies. I am currently working on getting around this issue. The missing dependencies include &lt;i&gt;comonad 5&lt;/i&gt;, &lt;i&gt;semigroupoids-5.0.1&lt;/i&gt; and &lt;i&gt;mtl-2.2.1&lt;/i&gt;. I have tried natively installing these dependencies from source(Github), but the build still seems to fail for same reason. I will try other possible steps to solve this problem and go ahead with exploring the features of KiCS2.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>[GSoC 2016] Installing PAKCS</title>
   <link href="https://karthiksenthil.github.io/2016/05/09/gsoc16/"/>
   <updated>2016-05-09T00:00:00+05:30</updated>
   <id>https://karthiksenthil.github.io/2016/05/09/gsoc16</id>
   <content type="html">&lt;p&gt;I spent the last few days surfing through the current codebase in ruby_curry in order to identify the code workflow for a single run of the tool.&lt;/p&gt;

&lt;p&gt;I have also started documenting a directory wise description of files for the status report which should be available soon.&lt;/p&gt;

&lt;p&gt;With regards to installing PAKCS on my local machine, I followed the instructions provided &lt;a href=&quot;https://www.informatik.uni-kiel.de/~pakcs/download.html&quot;&gt;here&lt;/a&gt;. I already had an updated version of &lt;a href=&quot;http://www.swi-prolog.org/&quot;&gt;SWI-Prolog&lt;/a&gt; and hence went ahead to just download the Linux(64 bit) release of &lt;a href=&quot;https://www.informatik.uni-kiel.de/~pakcs/download/pakcs-1.14.1-amd64-Linux.tar.gz&quot;&gt;PAKCS v1.14.1&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;The build took quite some time, but towards the end it was a smooth install. I could verify the working with the &lt;a href=&quot;http://www-ps.informatik.uni-kiel.de/smap/smap.cgi?download/1/1&quot;&gt;Naive Reverse&lt;/a&gt; example.&lt;/p&gt;

&lt;p&gt;An interesting feature in PAKCS is the curry2xml tool (using :xml in the REPL). This caught my attention as ruby_curry also aims to convert FlatCurry into JSON(in the frontend) for further processing into Ruby object code. So I’m looking into the working and features of this tool in PAKCS before implementing a similar idea for JSON in ruby_curry.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>[GSoC 2016] Community Bonding - First Post</title>
   <link href="https://karthiksenthil.github.io/2016/05/07/gsoc16/"/>
   <updated>2016-05-07T00:00:00+05:30</updated>
   <id>https://karthiksenthil.github.io/2016/05/07/gsoc16</id>
   <content type="html">&lt;p&gt;Hello all!&lt;/p&gt;

&lt;p&gt;This year as part of Google Summer of Code 2016 I will continue working on &lt;a href=&quot;https://github.com/karthiksenthil/ruby_curry&quot;&gt;ruby_curry&lt;/a&gt;, extending it to a full fledged compiler implementation for FlatCurry, a flavour of the functional logic programming language &lt;a href=&quot;https://en.wikipedia.org/wiki/Curry_(programming_language)&quot;&gt;Curry&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;More details about the project can be found &lt;a href=&quot;https://summerofcode.withgoogle.com/projects/#4517222395412480&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After discussions with my mentor, Prof. Antoy, I have decided to spend the initial part of the Community Bonding period for the following -&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; Status Report - detailed draft of current status of ruby_curry w.r.t. features and bugs &lt;/li&gt;
&lt;li&gt; Setting up &lt;a href=&quot;https://www.informatik.uni-kiel.de/~pakcs/&quot;&gt;PAKCS&lt;/a&gt; and &lt;a href=&quot;https://www-ps.informatik.uni-kiel.de/kics2/&quot;&gt;KiCS2&lt;/a&gt; on local machine &lt;/li&gt;
&lt;li&gt; Survey on the above compilers &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Looking forward to learn more :)&lt;/p&gt;

&lt;p&gt;P.S. : And yes, this year I will update about my progress in this project through regular blog posts on my personal website itself.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Multrix - A tool for dynamic dependence analysis of a program</title>
   <link href="https://karthiksenthil.github.io/2015/08/18/multrix/"/>
   <updated>2015-08-18T00:00:00+05:30</updated>
   <id>https://karthiksenthil.github.io/2015/08/18/multrix</id>
   <content type="html">&lt;p&gt;&lt;em&gt;A project undertaken in the &lt;a href=&quot;http://hpc.nitk.ac.in/&quot;&gt;HPC Research Group&lt;/a&gt; at National Institute of Technology Karnataka, India&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Multrix is an automatic, dynamic and language-independent tool to construct the Node Dependency Matrix(NDM) of an input program. It uses dynamic binary instrumentation techniques to identify dependencies at instruction level in the input program, and reprsent the same using the NDM.&lt;/p&gt;

&lt;p&gt;The Intel PIN DBI framework was used for instrumentation. Pin provides great flexibility in analysing executables with features to insert stubs or breakpoints in the running program. A custom program written using the Pin API to analyse running programs is a called PinTool.&lt;/p&gt;

&lt;p&gt;Usage and execution cycle in Pin :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Design Pintool to perform required analysis&lt;/li&gt;
  &lt;li&gt;Compile the Pintool into an &lt;code&gt;so&lt;/code&gt; file(shared object)&lt;/li&gt;
  &lt;li&gt;Attach the file to the program and execute it&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Work in progress&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>What is HPC?</title>
   <link href="https://karthiksenthil.github.io/2015/06/24/whats-hpc/"/>
   <updated>2015-06-24T00:00:00+05:30</updated>
   <id>https://karthiksenthil.github.io/2015/06/24/whats-hpc</id>
   <content type="html">&lt;p&gt;High Performance Computing(HPC) is becoming a trending term in Computer Science. Here is my view or definition of HPC in layman words.&lt;/p&gt;

&lt;p&gt;As humans we are bound by the performance metric in any activity that we pursue, constantly aiming to improve this metric. So it is unsurprising that computing devices these days are also striving to give their best performance.&lt;/p&gt;

&lt;p&gt;In my view, HPC can be defined as any activity that reduces computation time of a process on a computing device and accordingly shows signs of improvement(large or small-scale) in performance. Even the smallest step of reducing unecessary iterations in a for-loop can be a simple step towards high performance computing. A tool which emphasises this : &lt;a href=&quot;http://karthiksenthil.github.io/2015/08/18/multrix/&quot;&gt;Multrix&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So HPC doesn’t just refer to large scale parallel architectures or huge clusters of CPUs and GPUs with millions of cores. The simple small-scale optimizations that when implemented conserve our computation resources are the activities that define and drive HPC.&lt;/p&gt;
</content>
 </entry>
 

</feed>
